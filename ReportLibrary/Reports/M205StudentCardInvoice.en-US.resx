<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox79.Value" xml:space="preserve">
    <value>#</value>
  </data>
  <data name="textBox75.Value" xml:space="preserve">
    <value>Invoice No</value>
  </data>
  <data name="textBox76.Value" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="textBox78.Value" xml:space="preserve">
    <value>Invoice Cut Date</value>
  </data>
  <data name="textBox81.Value" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="textBox84.Value" xml:space="preserve">
    <value>Tax</value>
  </data>
  <data name="textBox86.Value" xml:space="preserve">
    <value>Total Amount</value>
  </data>
  <data name="textBox87.Value" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="textBox124.Value" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="textBox115.Value" xml:space="preserve">
    <value>Receipt No</value>
  </data>
  <data name="textBox118.Value" xml:space="preserve">
    <value>Payment Amount</value>
  </data>
  <data name="textBox120.Value" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="textBox95.Value" xml:space="preserve">
    <value>Installment Date</value>
  </data>
  <data name="textBox97.Value" xml:space="preserve">
    <value>Installment No</value>
  </data>
  <data name="textBox116.Value" xml:space="preserve">
    <value>Payment Type</value>
  </data>
  <data name="textBox101.Value" xml:space="preserve">
    <value>Debt Amount</value>
  </data>
  <data name="textBox110.Value" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="textBox112.Value" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="textBox10.Value" xml:space="preserve">
    <value>=  IIf(Fields.InvoiceSerialNo = 0, "", Fields.InvoiceSerialNo)</value>
  </data>
  <data name="textBox16.Value" xml:space="preserve">
    <value>= Fields.InvoiceDate.Date</value>
  </data>
  <data name="textBox25.Value" xml:space="preserve">
    <value>= Fields.InvoiceCutDate.Date
</value>
  </data>
  <data name="textBox68.Value" xml:space="preserve">
    <value>=  IIf(Fields.DUnitPrice = 0, "", Fields.DUnitPrice)</value>
  </data>
  <data name="textBox72.Value" xml:space="preserve">
    <value>= Fields.DTax</value>
  </data>
  <data name="textBox74.Value" xml:space="preserve">
    <value>= Fields.DAmount</value>
  </data>
  <data name="textBox83.Value" xml:space="preserve">
    <value>= RowNumber()</value>
  </data>
  <data name="checkBox1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="textBox102.Value" xml:space="preserve">
    <value>= Sum(Fields.DUnitPrice)</value>
  </data>
  <data name="textBox103.Value" xml:space="preserve">
    <value>= Sum(Fields.DTax)</value>
  </data>
  <data name="textBox104.Value" xml:space="preserve">
    <value>= Sum(Fields.DAmount)</value>
  </data>
  <data name="textBox73.Value" xml:space="preserve">
    <value>TOTAL</value>
  </data>
  <data name="sqlDataSource5.SelectCommand" xml:space="preserve">
    <value>SELECT        S.StudentID, I.StudentInvoiceID, I.StudentID, I.InvoiceSerialNo, I.InvoiceDate, I.InvoiceCutDate, I.DUnitPrice, I.DDiscount, I.DTax, I.DAmount, I.InvoiceStatus
FROM          Student S
              INNER JOIN StudentInvoice I on I.StudentID = S.StudentID
WHERE       S.StudentID = @StudenID

</value>
  </data>
  <data name="textBox88.Value" xml:space="preserve">
    <value>Invoice Information</value>
  </data>
  <data name="textBox89.Value" xml:space="preserve">
    <value>= Fields.FirstName + " " + Fields.Lastname</value>
  </data>
  <data name="textBox90.Value" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="textBox91.Value" xml:space="preserve">
    <value>Classroom.:</value>
  </data>
  <data name="textBox92.Value" xml:space="preserve">
    <value>= Fields.ClassroomName</value>
  </data>
  <data name="textBox93.Value" xml:space="preserve">
    <value>= Fields.StudentNumber</value>
  </data>
  <data name="textBox94.Value" xml:space="preserve">
    <value>Student No.:</value>
  </data>
  <data name="textBox23.Value" xml:space="preserve">
    <value>Student Card</value>
  </data>
  <data name="textBox8.Value" xml:space="preserve">
    <value>                     COLLECTION</value>
  </data>
  <data name="textBox26.Value" xml:space="preserve">
    <value>Name.:</value>
  </data>
  <data name="textBox28.Value" xml:space="preserve">
    <value>Classroom.:</value>
  </data>
  <data name="textBox34.Value" xml:space="preserve">
    <value>Home Add.:</value>
  </data>
  <data name="textBox35.Value" xml:space="preserve">
    <value>Town.:</value>
  </data>
  <data name="textBox36.Value" xml:space="preserve">
    <value>City.:</value>
  </data>
  <data name="textBox37.Value" xml:space="preserve">
    <value>Id Number.:</value>
  </data>
  <data name="textBox38.Value" xml:space="preserve">
    <value>Mobile.:</value>
  </data>
  <data name="textBox39.Value" xml:space="preserve">
    <value>STUDENT</value>
  </data>
  <data name="textBox40.Value" xml:space="preserve">
    <value>PARENT</value>
  </data>
  <data name="textBox41.Value" xml:space="preserve">
    <value>Name.:</value>
  </data>
  <data name="textBox42.Value" xml:space="preserve">
    <value>Work Address.:</value>
  </data>
  <data name="textBox43.Value" xml:space="preserve">
    <value>Town.:</value>
  </data>
  <data name="textBox44.Value" xml:space="preserve">
    <value>City.:</value>
  </data>
  <data name="textBox45.Value" xml:space="preserve">
    <value>Home Phone.:</value>
  </data>
  <data name="textBox46.Value" xml:space="preserve">
    <value>Mobile.:</value>
  </data>
  <data name="textBox47.Value" xml:space="preserve">
    <value>Id Number.:</value>
  </data>
  <data name="textBox1.Value" xml:space="preserve">
    <value>DEBT</value>
  </data>
  <data name="textBox18.Value" xml:space="preserve">
    <value>Cash Pay.:</value>
  </data>
  <data name="textBox19.Value" xml:space="preserve">
    <value>Refund.:</value>
  </data>
  <data name="textBox66.Value" xml:space="preserve">
    <value>W. Phone.:</value>
  </data>
  <data name="textBox67.Value" xml:space="preserve">
    <value>= Fields.WorkPhone</value>
  </data>
  <data name="textBox29.Value" xml:space="preserve">
    <value>Period.:</value>
  </data>
  <data name="sqlDataSource2.SelectCommand" xml:space="preserve">
    <value>SELECT        S.CompanyName, S.CompanyAddress, S.Phone1, S.Phone2, S.MobilePhone, S.Fax, S.TaxOffice, S.TaxNo, S.CompanyEmail, S.WebSite, U.UserPeriod
FROM          SchoolInfo AS S 
              INNER JOIN Users AS U ON U.UserID = @userID
WHERE         S.SchoolID = U.SchoolID</value>
  </data>
  <data name="textBox31.Value" xml:space="preserve">
    <value>Bank Code.:</value>
  </data>
  <data name="textBox21.Value" xml:space="preserve">
    <value>Serial No.:</value>
  </data>
  <data name="textBox24.Value" xml:space="preserve">
    <value>Date of registration.:</value>
  </data>
  <data name="textBox85.Value" xml:space="preserve">
    <value>TOTAL</value>
  </data>
  <data name="sqlDataSource7.SelectCommand" xml:space="preserve">
    <value>SELECT        S.StudentID,  IP.PaymentDate, IP.AccountReceipt, IP.PaymentAmount, IP.BalanceAmount 
FROM     TempM101 TP
              INNER JOIN Student AS S ON S.StudentID = TP.StudentID
              LEFT JOIN StudentPayment IP on IP.StudentID = TP.StudentID and IP.Period = @period
WHERE       TP.StudentID = @StudentID and TP.UserID = @userID
</value>
  </data>
  <data name="textBox5.Value" xml:space="preserve">
    <value>TOTAL</value>
  </data>
  <data name="sqlDataSource6.SelectCommand" xml:space="preserve">
    <value>IF (@language = 'tr-TR')
BEGIN
	SELECT        I.InstallmentDate, I.InstallmentNo, I.CategoryID as InsCategoryID, I.CheckCardNo as InsCheckCardNo, I.InstallmentAmount as InsInstallmentAmount,
              I.PreviousPayment as InsPreviousPayment, I.PaymentDate as InsPaymentDate, I.AccountReceiptNo as InsAccountReceiptNo, I.AccountReceiptNo as AccountReceiptNo,
	      P1.CategoryName, P2.CategoryName AS InsStatus
	FROM   TempM101 TP
              INNER JOIN Student AS S ON S.StudentID = TP.StudentID
              INNER JOIN StudentInstallment I on I.StudentID = TP.StudentID and I.Period = @period and I.SchoolID = @schoolID
              LEFT JOIN Parameter AS P1 ON I.CategoryID = P1.CategoryID
              LEFT JOIN Parameter AS P2 ON I.StatusCategoryID = P2.CategoryID
	WHERE       TP.StudentID = @StudentID and TP.UserID = @userID
END
ELSE
BEGIN
	SELECT        I.InstallmentDate, I.InstallmentNo, I.CategoryID as InsCategoryID, I.CheckCardNo as InsCheckCardNo, I.InstallmentAmount as InsInstallmentAmount,
              I.PreviousPayment as InsPreviousPayment, I.PaymentDate as InsPaymentDate, I.AccountReceiptNo as InsAccountReceiptNo, I.AccountReceiptNo as AccountReceiptNo,
	      P1.Language1 as CategoryName, P2.Language1 AS InsStatus
	FROM   TempM101 TP
              INNER JOIN Student AS S ON S.StudentID = TP.StudentID
              INNER JOIN StudentInstallment I on I.StudentID = TP.StudentID and I.Period = @period and I.SchoolID = @schoolID
              LEFT JOIN Parameter AS P1 ON I.CategoryID = P1.CategoryID
              LEFT JOIN Parameter AS P2 ON I.StatusCategoryID = P2.CategoryID
	WHERE       TP.StudentID = @StudentID and TP.UserID = @userID
END</value>
  </data>
  <data name="textBox48.Value" xml:space="preserve">
    <value>= Fields.TaxNo</value>
  </data>
  <data name="textBox49.Value" xml:space="preserve">
    <value>= Fields.TaxOffice</value>
  </data>
  <data name="textBox50.Value" xml:space="preserve">
    <value>= Fields.WebSite</value>
  </data>
  <data name="textBox71.Value" xml:space="preserve">
    <value>= Fields.CompanyEmail</value>
  </data>
  <data name="textBox51.Value" xml:space="preserve">
    <value>= Fields.Fax</value>
  </data>
  <data name="textBox14.Value" xml:space="preserve">
    <value>= Fields.Phone2</value>
  </data>
  <data name="textBox32.Value" xml:space="preserve">
    <value>= Fields.Phone1</value>
  </data>
  <data name="textBox33.Value" xml:space="preserve">
    <value>= Fields.MobilePhone</value>
  </data>
  <data name="sqlDataSource1.SelectCommand" xml:space="preserve">
    <value>SELECT        S.StudentID, S.FirstName, S.Lastname, (S.FirstName + ' ' + S.Lastname) AS StudentName,  S.StudentSerialNumber, S.StudentNumber,  S.IsPension, S.IdNumber as StudentIdNumber, S.GenderTypeCategoryID, S.DateOfRegistration, S.StudentPicture,
              T.CashPayment, T.SubTotal, T.RefundAmount1,T.RefundAmount2, T.RefundAmount3,
              SA.Address1, SA.CityParameterID1, SA.TownParameterID1, SA.ZipCode1, SA.MobilePhone as StudentMobilePhone, 
              PA.WorkAddress, PA.IdNumber as ParentIdNumber, PA.HomePhone, PA.WorkPhone, PA.MobilePhone as ParentMobilePhone, PA.WorkCityParameterID, PA.WorkTownParameterID, PA.WorkZipCode,
              TP.ClassroomName, TP.ClassroomID, TP.Name,
              P2.CategoryName AS City, P3.CategoryName AS Town, P4.CategoryName AS WorkCity, P5.CategoryName AS WorkTown
                      
FROM            TempM101 TP
                        INNER JOIN Student AS S ON S.StudentID = TP.StudentID
                        INNER JOIN Users AS U ON U.UserID = @userID
                        LEFT JOIN StudentTemp T on T.StudentID = S.StudentID and T.Period = U.UserPeriod
                        LEFT JOIN StudentAddress SA on SA.StudentID = S.StudentID 
                        LEFT JOIN StudentParentAddress PA on PA.StudentID = S.StudentID 
			
   	                LEFT JOIN Parameter as P2 ON SA.CityParameterID1 = P2.CategoryID
		        LEFT JOIN Parameter as P3 ON SA.TownParameterID1 = P3.CategoryID
		        LEFT JOIN Parameter as P4 ON PA.WorkCityParameterID = P4.CategoryID
		        LEFT JOIN Parameter as P5 ON PA.WorkTownParameterID = P5.CategoryID

WHERE  S.SchoolID = TP.SchoolID and TP.UserID = @userID and
( (S.FirstName + ' ' + S.Lastname ) LIKE ('%' + @StudentName + '%') and (@StudentName) &lt;&gt; ' ')
or
( TP.ClassroomID IN (@Classroom) and (U.UserPeriod = @period)  and (@StudentName) = ' ')</value>
  </data>
  <data name="reportParameter1.Text" xml:space="preserve">
    <value>Pictorial</value>
  </data>
  <data name="reportParameter2.Text" xml:space="preserve">
    <value>Student Name (A..Z)</value>
  </data>
  <data name="reportParameter3.Text" xml:space="preserve">
    <value>Classroom</value>
  </data>
  <data name="reportParameter5.Text" xml:space="preserve">
    <value>Student Name (A..Z)</value>
  </data>
  <data name="reportParameter7.Text" xml:space="preserve">
    <value>Pictorial</value>
  </data>
</root>