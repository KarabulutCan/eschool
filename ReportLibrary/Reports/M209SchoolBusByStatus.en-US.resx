<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox6.Value" xml:space="preserve">
    <value>Class room</value>
  </data>
  <data name="textBox7.Value" xml:space="preserve">
    <value>School #	</value>
  </data>
  <data name="textBox2.Value" xml:space="preserve">
    <value>Student Name</value>
  </data>
  <data name="textBox4.Value" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="textBox1.Value" xml:space="preserve">
    <value>Departure</value>
  </data>
  <data name="textBox10.Value" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="textBox19.Value" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="textBox23.Value" xml:space="preserve">
    <value>Period.:</value>
  </data>
  <data name="textBox20.Value" xml:space="preserve">
    <value>Male.:</value>
  </data>
  <data name="textBox21.Value" xml:space="preserve">
    <value>Female.:</value>
  </data>
  <data name="textBox22.Value" xml:space="preserve">
    <value>Total.:</value>
  </data>
  <data name="sqlDataSource4.SelectCommand" xml:space="preserve">
    <value>IF (@language = 'tr-TR')
BEGIN
	SELECT        SchoolFeeID, Name
	FROM          SchoolFee
	WHERE FeeCategory=2
END

ELSE
BEGIN
	SELECT        SchoolFeeID, Language1 as Name
	FROM          SchoolFee
	WHERE FeeCategory=2
END
</value>
  </data>
  <data name="sqlDataSource1.SelectCommand" xml:space="preserve">
    <value>IF (@language = 'tr-TR')
BEGIN
	SELECT        S.StudentID, S.StudentSerialNumber, S.StudentNumber, S.FirstName, S.LastName, S.ClassroomID,
              S.GenderTypeCategoryID, P1.CategoryName AS Gender, P2.BusRoute AS ServiceDeparture, P3.BusRoute AS ServiceReturn, P4.Name AS ServiceStatus,
	      C.ClassroomName
	FROM          Student S
                INNER JOIN Users AS U ON U.UserID = @userID
                INNER JOIN Classroom as C ON S.ClassroomID = C.ClassroomID AND C.Period = @period and C.SchoolID = U.SchoolID
                INNER JOIN Parameter as P1 ON S.GenderTypeCategoryID = P1.CategoryID
		INNER JOIN SchoolBusServices as P2 ON S.SchoolBusDepartureID = P2.SchoolBusServicesID and P2.Period = @period and P2.SchoolID = U.SchoolID
	        INNER JOIN SchoolBusServices as P3 ON S.SchoolBusReturnID = P3.SchoolBusServicesID and P3.Period = @period and P3.SchoolID = U.SchoolID
		INNER JOIN SchoolFee as P4 ON S.SchoolBusStatuID = P4.SchoolFeeID

	WHERE       S.SchoolBusStatuID IN (@statuID) and S.SchoolID = U.SchoolID
	ORDER BY  CASE
            WHEN @OrderOptions01 = 1 THEN (RANK() OVER (ORDER BY C.classroomName))
            WHEN @OrderOptions02 = 1 THEN (RANK() OVER (ORDER BY ABS(S.StudentNumber)))
            WHEN @OrderOptions03 = 1 THEN (RANK() OVER (ORDER BY S.FirstName))
            WHEN @OrderOptions04 = 1 THEN (RANK() OVER (ORDER BY P2.BusRoute))
         END

END

ELSE
BEGIN
	SELECT        S.StudentID, S.StudentSerialNumber, S.StudentNumber, S.FirstName, S.LastName, S.ClassroomID,
              S.GenderTypeCategoryID, P1.Language1 AS Gender, P2.BusRoute AS ServiceDeparture, P3.BusRoute AS ServiceReturn, P4.Language1 AS ServiceStatus,
	      C.ClassroomName
	FROM          Student S
                INNER JOIN Users AS U ON U.UserID = @userID
                INNER JOIN Classroom as C ON S.ClassroomID = C.ClassroomID AND C.Period = @period and C.SchoolID = U.SchoolID
                INNER JOIN Parameter as P1 ON S.GenderTypeCategoryID = P1.CategoryID
		INNER JOIN SchoolBusServices as P2 ON S.SchoolBusDepartureID = P2.SchoolBusServicesID and P2.Period = @period and P2.SchoolID = U.SchoolID
	        INNER JOIN SchoolBusServices as P3 ON S.SchoolBusReturnID = P3.SchoolBusServicesID and P3.Period = @period and P3.SchoolID = U.SchoolID
		INNER JOIN SchoolFee as P4 ON S.SchoolBusStatuID = P4.SchoolFeeID

	WHERE       S.SchoolBusStatuID IN (@statuID) and S.SchoolID = U.SchoolID
	ORDER BY  CASE
            WHEN @OrderOptions01 = 1 THEN (RANK() OVER (ORDER BY C.classroomName))
            WHEN @OrderOptions02 = 1 THEN (RANK() OVER (ORDER BY ABS(S.StudentNumber)))
            WHEN @OrderOptions03 = 1 THEN (RANK() OVER (ORDER BY S.FirstName))
            WHEN @OrderOptions04 = 1 THEN (RANK() OVER (ORDER BY P2.BusRoute))
         END

END
</value>
  </data>
  <data name="sqlDataSource2.SelectCommand" xml:space="preserve">
    <value>SELECT        S.CompanyName, S.CompanyAddress, S.Phone1, S.Phone2, S.MobilePhone, S.Fax, S.TaxOffice, S.TaxNo, S.CompanyEmail, S.WebSite, U.UserPeriod
FROM          SchoolInfo AS S 
              INNER JOIN Users AS U ON U.UserID = @userID
WHERE         S.SchoolID = U.SchoolID</value>
  </data>
  <data name="textBox11.Value" xml:space="preserve">
    <value>School Services List</value>
  </data>
  <data name="textBox12.Value" xml:space="preserve">
    <value>Date.:</value>
  </data>
  <data name="textBox48.Value" xml:space="preserve">
    <value>= Fields.TaxNo</value>
  </data>
  <data name="textBox49.Value" xml:space="preserve">
    <value>= Fields.TaxOffice</value>
  </data>
  <data name="textBox50.Value" xml:space="preserve">
    <value>= Fields.WebSite</value>
  </data>
  <data name="textBox71.Value" xml:space="preserve">
    <value>= Fields.CompanyEmail</value>
  </data>
  <data name="textBox51.Value" xml:space="preserve">
    <value>= Fields.Fax</value>
  </data>
  <data name="textBox58.Value" xml:space="preserve">
    <value>= Fields.Phone2</value>
  </data>
  <data name="textBox25.Value" xml:space="preserve">
    <value>= Fields.Phone1</value>
  </data>
  <data name="textBox26.Value" xml:space="preserve">
    <value>= Fields.MobilePhone</value>
  </data>
  <data name="reportParameter1.Text" xml:space="preserve">
    <value>By Classroom</value>
  </data>
  <data name="reportParameter2.Text" xml:space="preserve">
    <value>By Student #</value>
  </data>
  <data name="reportParameter3.Text" xml:space="preserve">
    <value>By Student Name</value>
  </data>
  <data name="reportParameter4.Text" xml:space="preserve">
    <value>By Departure</value>
  </data>
  <data name="reportParameter8.Text" xml:space="preserve">
    <value>Statu Category</value>
  </data>
</root>