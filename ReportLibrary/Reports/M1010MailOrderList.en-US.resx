<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textBox124.Value" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="textBox115.Value" xml:space="preserve">
    <value>Receipt No</value>
  </data>
  <data name="textBox118.Value" xml:space="preserve">
    <value>Payment Amount</value>
  </data>
  <data name="textBox120.Value" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="textBox95.Value" xml:space="preserve">
    <value>Installment Date</value>
  </data>
  <data name="textBox97.Value" xml:space="preserve">
    <value>Installment No</value>
  </data>
  <data name="textBox116.Value" xml:space="preserve">
    <value>Payment Type</value>
  </data>
  <data name="textBox101.Value" xml:space="preserve">
    <value>Debt Amount</value>
  </data>
  <data name="textBox110.Value" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="textBox112.Value" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="textBox23.Value" xml:space="preserve">
    <value>Student Card</value>
  </data>
  <data name="textBox8.Value" xml:space="preserve">
    <value>                     COLLECTION</value>
  </data>
  <data name="textBox26.Value" xml:space="preserve">
    <value>Name.:</value>
  </data>
  <data name="textBox28.Value" xml:space="preserve">
    <value>Classroom.:</value>
  </data>
  <data name="textBox34.Value" xml:space="preserve">
    <value>Home Add.:</value>
  </data>
  <data name="textBox35.Value" xml:space="preserve">
    <value>Town.:</value>
  </data>
  <data name="textBox36.Value" xml:space="preserve">
    <value>City.:</value>
  </data>
  <data name="textBox37.Value" xml:space="preserve">
    <value>Id Number.:</value>
  </data>
  <data name="textBox38.Value" xml:space="preserve">
    <value>Mobile.:</value>
  </data>
  <data name="textBox39.Value" xml:space="preserve">
    <value>STUDENT</value>
  </data>
  <data name="textBox40.Value" xml:space="preserve">
    <value>PARENT</value>
  </data>
  <data name="textBox41.Value" xml:space="preserve">
    <value>Name.:</value>
  </data>
  <data name="textBox42.Value" xml:space="preserve">
    <value>Work Address.:</value>
  </data>
  <data name="textBox43.Value" xml:space="preserve">
    <value>Town.:</value>
  </data>
  <data name="textBox44.Value" xml:space="preserve">
    <value>City.:</value>
  </data>
  <data name="textBox45.Value" xml:space="preserve">
    <value>Home Phone.:</value>
  </data>
  <data name="textBox46.Value" xml:space="preserve">
    <value>Mobile Phone.:</value>
  </data>
  <data name="textBox47.Value" xml:space="preserve">
    <value>Id Number.:</value>
  </data>
  <data name="textBox1.Value" xml:space="preserve">
    <value>DEBT</value>
  </data>
  <data name="textBox18.Value" xml:space="preserve">
    <value>Cash Pay.:</value>
  </data>
  <data name="textBox19.Value" xml:space="preserve">
    <value>Refund.:</value>
  </data>
  <data name="textBox66.Value" xml:space="preserve">
    <value>Work Phone.:</value>
  </data>
  <data name="textBox29.Value" xml:space="preserve">
    <value>Period.:</value>
  </data>
  <data name="textBox31.Value" xml:space="preserve">
    <value>Bank Code.:</value>
  </data>
  <data name="textBox21.Value" xml:space="preserve">
    <value>Serial No.:</value>
  </data>
  <data name="textBox24.Value" xml:space="preserve">
    <value>Date of registration.:</value>
  </data>
  <data name="textBox85.Value" xml:space="preserve">
    <value>TOTAL</value>
  </data>
  <data name="textBox5.Value" xml:space="preserve">
    <value>TOTAL</value>
  </data>
  <data name="textBox10.Value" xml:space="preserve">
    <value>&lt;------------------------&gt;</value>
  </data>
  <data name="sqlDataSource1.SelectCommand" xml:space="preserve">
    <value>SELECT        S.StudentID, S.FirstName, S.Lastname, (S.FirstName + ' ' + S.Lastname) AS StudentName, S.StudentClassroomID, S.StudentSerialNumber, S.StudentNumber,  S.IsPension, S.IdNumber as StudentIdNumber, S.GenderTypeCategoryID, S.DateOfRegistration, S.StudentPicture,
              T.CashPayment, T.SubTotal, T.RefundAmount1,T.RefundAmount2, T.RefundAmount3,
              SA.Address1, SA.CityParameterID1, SA.TownParameterID1, SA.ZipCode1, SA.MobilePhone as StudentMobilePhone, SA.MobilePhone as StudentMobilePhone, 
              PA.WorkAddress, PA.IdNumber as ParentIdNumber, PA.HomePhone, PA.WorkPhone, PA.MobilePhone as ParentMobilePhone, PA.WorkCityParameterID, PA.WorkTownParameterID, PA.WorkZipCode,
              
              I.InstallmentDate, I.InstallmentNo, I.CategoryID as InsCategoryID, I.CheckCardNo as InsCheckCardNo, I.InstallmentAmount as InsInstallmentAmount,
              I.PreviousPayment as InsPreviousPayment, I.Status as InsStatus, I.PaymentDate as InsPaymentDate, I.AccountReceiptNo as InsAccountReceiptNo, I.AccountReceiptNo as AccountReceiptNo,
              IP.PaymentDate, IP.AccountReceipt, IP.PaymentAmount, IP.BalanceAmount,
          
              C.ClassroomName, C.ClassroomID, C.ClassroomTeacher, 
              P1.CategoryName, P2.CategoryName AS City, P3.CategoryName AS Town, P4.CategoryName AS WorkCity, P5.CategoryName AS WorkTown,
              B.BankGivenCode 

FROM            Student S
                        LEFT JOIN StudentTemp T on T.StudentID = S.StudentID

                        LEFT JOIN StudentAddress SA on SA.StudentID = S.StudentID
                        LEFT JOIN StudentParentAddress PA on PA.StudentID = S.StudentID
                        LEFT JOIN StudentInstallment I on I.StudentID = S.StudentID
                        LEFT JOIN StudentPayment IP on IP.StudentID = S.StudentID and I.InstallmentNo = IP.InstallmentNo

                        LEFT JOIN Classroom C ON S.StudentClassroomID = C.ClassroomID
                        INNER JOIN Bank B on B.BankID = I.BankID
        
                        INNER JOIN Parameter AS P1 ON I.CategoryID = P1.CategoryID

   	                LEFT JOIN Parameter as P2 ON SA.CityParameterID1 = P2.CategoryID
		        LEFT JOIN Parameter as P3 ON SA.TownParameterID1 = P3.CategoryID

		        LEFT JOIN Parameter as P4 ON PA.WorkCityParameterID = P4.CategoryID
		        LEFT JOIN Parameter as P5 ON PA.WorkTownParameterID = P5.CategoryID
WHERE         (S.FirstName + ' ' + S.Lastname) LIKE ('%' + @studentName + '%') or (@studentName is null and S.StudentClassroomID = @Classroom)

</value>
  </data>
  <data name="reportParameter1.Text" xml:space="preserve">
    <value>Classroom</value>
  </data>
  <data name="reportParameter5.Text" xml:space="preserve">
    <value>Student Name (A..Z)</value>
  </data>
  <data name="reportParameter7.Text" xml:space="preserve">
    <value>Pictorial</value>
  </data>
</root>